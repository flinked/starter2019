{"version":3,"sources":["node_modules/browser-pack/_prelude.js","../app/sources/javascript/helpers/AutoScroll.js","../app/sources/javascript/helpers/CheckMobile.js","../app/sources/javascript/helpers/ConsolSignature.js","../app/sources/javascript/helpers/Coords.js","../app/sources/javascript/helpers/ResizeEvent.js","../app/sources/javascript/helpers/Useful.js","../app/sources/javascript/index.js","../app/sources/javascript/public/BarbaConfig.js","../app/sources/javascript/public/BarbaTransition.js","../app/sources/javascript/public/PageTransition.js","node_modules/barba.js/dist/barba.js"],"names":[],"mappings":"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":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// auto scroll\n\nclass AutoScroll\n{\n    /**\n     * Constructor\n     */\n    constructor( options )\n    {\n\n    }\n\n    /**\n     * @function closes\n     * @description close scrolling project\n     */\n    autoScroll(dur, section) {\n    // select DOM element\n        const page = window\n        \n\n        // init variable\n\n        const to = section\n        const duration = dur\n        const start = page.scrollY\n        const change = to - start\n        let currentTime = 0\n        const increment = 20\n\n        // animate fonction\n\n        const animateScroll = () => {\n            currentTime += increment\n            const val = this.easeInOutQuad(currentTime, start, change, duration)\n            page.scroll(0, val)\n            if (currentTime < duration) {\n                setTimeout(animateScroll, increment)\n            }\n        }\n        animateScroll()\n    }\n\n    /**\n     * @function easeInOutQuad\n     * @description ease transition for closing scroll\n     */\n    easeInOutQuad(tP, bP, cP, dP) {\n        let t = tP\n        const b = bP\n        const c = cP\n        const d = dP\n\n        t /= d / 2\n        if (t < 1) return c / 2 * t * t + b\n        t -= 1\n        return -c / 2 * (t *(t - 2) - 1) + b\n    }\n\n    init(dur, section) {\n        this.autoScroll(dur, section)\n    }\n}\n\nexport default AutoScroll\n","class CheckMobile\n{\n\n    init() {\n        var check = false\n        (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true})(navigator.userAgent||navigator.vendor||window.opera)\n        return check\n    }\n}\n\nexport default CheckMobile\n","class ConsolSignature\n{\n    printConsol() {\n        \n        console.log(\n            '%c                                                                           ' + '\\n' +\n            '                                                                           ' + '\\n' +\n            '                                                                           ' + '\\n' +\n            '                                                                           ' + '\\n' +\n            '    ________ ___       ___  ________   ___  __    _______   ________       ' + '\\n' +\n            '   |\\\\  _____\\\\\\\\  \\\\     |\\\\  \\\\|\\\\   ___  \\\\|\\\\  \\\\|\\\\  \\\\ |\\\\  ___ \\\\ |\\\\   ___ \\\\      ' + '\\n' +\n            '   \\\\ \\\\  \\\\__/\\\\ \\\\  \\\\    \\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\/  /|\\\\ \\\\   __/|\\\\ \\\\  \\\\_|\\\\ \\\\     ' + '\\n' +\n            '    \\\\ \\\\   __\\\\\\\\ \\\\  \\\\    \\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\   ___  \\\\ \\\\  \\\\_|/_\\\\ \\\\  \\\\ \\\\\\\\ \\\\    ' + '\\n' +\n            '     \\\\ \\\\  \\\\_| \\\\ \\\\  \\\\____\\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\_\\\\\\\\ \\\\   ' + '\\n' +\n            '      \\\\ \\\\__\\\\   \\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\\\\\ \\\\__\\\\ \\\\__\\\\\\\\ \\\\__\\\\ \\\\_______\\\\ \\\\_______\\\\  ' + '\\n' +\n            '       \\\\|__|    \\\\|_______|\\\\|__|\\\\|__| \\\\|__|\\\\|__| \\\\|__|\\\\|_______|\\\\|_______|  ' + '\\n' +\n            '                                                                           ' + '\\n' +\n            '                                                                           ' + '\\n' +\n            '                                                                           ' + '\\n' +\n            '    Developed by : Alexis B. & Timothee H.                                 ' + '\\n' +\n            '                                                                           ' + '\\n' +\n            '                                                                           ' + '\\n' +\n            '                                                                           ', 'background: #000; color: #477DF6; font-weight: 900;')\n    }\n\n    init() {\n        this.printConsol()\n    }\n}\n\nexport default ConsolSignature","class Coords\n{\n\n    init(elem) {\n        var box = elem.getBoundingClientRect()\n\n        var body = document.body\n        var docEl = document.documentElement\n\n        var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop\n        var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft\n\n        var clientTop = docEl.clientTop || body.clientTop || 0\n        var clientLeft = docEl.clientLeft || body.clientLeft || 0\n\n        var top  = box.top +  scrollTop - clientTop\n        var left = box.left + scrollLeft - clientLeft\n\n        return { top: Math.round(top), left: Math.round(left) }\n    }\n}\n\nexport default Coords","class ResizeEvent\n{\n    /**\n     * Constructor\n     */\n    constructor( options )\n    {\n\n    }\n\n    mobileAndTabletcheck () {\n        var check = false\n        (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true})(navigator.userAgent||navigator.vendor||window.opera)\n        return check\n    }\n\n    init() {\n        if(this.mobileAndTabletcheck() !== true) {\n            window.addEventListener('resize', (e) => {\n                // window.location.reload()\n                document.location.reload(true)\n            })\n        }\n    }\n}\n\nexport default ResizeEvent\n","\nimport AutoScroll from './AutoScroll'\nimport Coords from './Coords'\nimport CheckMobile from './CheckMobile'\nimport ResizeEvent from './ResizeEvent'\nimport ConsolSignature from './ConsolSignature'\n\nclass Useful\n{\n\n    autoScroll() {\n        let autoScroll = new AutoScroll\n        autoScroll.init()\n    }\n\n    coords() {\n        let coords = new Coords\n        coords.init()\n    }\n\n    mobile() {\n        let mobile = new CheckMobile\n        return mobile.init()\n    }\n\n    resize() {\n        let resizeEvent = new ResizeEvent\n        return resizeEvent.init()\n    }\n\n    print() {\n        let resizeEvent = new ResizeEvent\n        return resizeEvent.init()\n    }\n\n    printConsol() {\n        let consolSignature = new ConsolSignature\n        return consolSignature.init()\n    }\n}\n\nexport default Useful\n","import PageTransition from './public/PageTransition'\nimport Useful from './helpers/Useful'\n\nwindow.flinked = {}\n\nfunction init() {\n\n    let useful = new Useful\n    useful.printConsol()\n\n    window.flinked.reinit()\n}\n\nwindow.flinked.reinit = function() {\n\n    this.pageTransition = new PageTransition();\n    this.pageTransition.init();\n\n    window.flinked.destroy()\n}\n\nwindow.flinked.destroy = function() {\n    // window.flinked.onDestroy(window.flinked.scrollSection);\n  }\n  \n  window.flinked.onDestroy = function(obj) {\n      if(obj)\n      {\n          if(obj.destroy)\n          {\n              obj.destroy();\n          }\n          obj = null;\n      }\n  }\n\nwindow.onload = init","import Barba from 'barba.js'\n\nclass BarbaConfig\n{\n    /**\n     * Constructor\n     */\n    constructor( options )\n    {\n\n    }\n\n    getLink(className) {\n        return document.querySelectorAll(className)\n    }\n\n    settings() {\n        Barba.Dispatcher.on('newPageReady', function(currentStatus, oldStatus, barbaContainer, newPageRawHTML) {\n\n            if ( Barba.HistoryManager.history.length === 1 ) {\n               return;\n            }\n\n            const link = currentStatus.url\n\n            const navigationLinks = document.querySelectorAll('.menu-item');\n            const navigationLinkIsActive = document.querySelector(`.menu-item a[href=\"${link}\"]`);\n    \n            let parent = null\n            Array.prototype.forEach.call(navigationLinks, (navigationLink) => navigationLink.classList.remove('active')); // remove CSS class 'is-active' from all .navigation__links\n    \n            if(document.querySelector(`.menu-item a[href=\"${link}\"]`)) {\n              parent = navigationLinkIsActive.parentNode\n              parent.classList.add('active');\n            }\n\n            var $newPageHead = jQuery( '<head />' ).html(\n                jQuery.parseHTML(\n                  newPageRawHTML.match( /<head[^>]*>([\\s\\S.]*)<\\/head>/i )[ 0 ],\n                  document,\n                  true\n               )\n            );\n\n            var headTags = [\n               \"link[rel='canonical']\",\n               \"link[rel='shortlink']\",\n               \"link[rel='alternate']\",\n               \"meta[name='description']\",\n               \"meta[property^='og']\",\n               \"meta[name^='twitter']\",\n               \"meta[name='robots']\"\n            ].join( ',' );\n            jQuery('head').find(headTags).remove();\n            $newPageHead.find(headTags).appendTo('head');\n         });\n    }\n\n    init() {\n\n    }\n}\n\nexport default BarbaConfig\n","import Barba from 'barba.js'\n\nclass BarbaTransition\n{\n    /**\n     * Constructor\n     */\n    constructor( options )\n    {\n\n    }\n\n    fadeTransition() {\n        var FadeTransition = Barba.BaseTransition.extend({\n            start: function() {\n                Promise\n                    .all([this.newContainerLoading, this.fadeOut()])\n                    .then(this.fadeIn.bind(this));\n            },\n\n            fadeOut: function() {\n                return jQuery(this.oldContainer).animate({ opacity: 0 }).promise();\n            },\n\n            fadeIn: function() {\n\n                    window.scroll(0,0)\n                    \n                    var _this = this;\n                    var $el = jQuery(this.newContainer);\n\n                    let header = {\n                        menu: document.querySelector('.header'),\n                    }\n                \n\n                    header.menu.classList.remove('hideAnimation')\n\n                    jQuery(this.oldContainer).hide();\n\n                    $el.css({\n                        visibility : 'visible',\n                        opacity : 0\n                    });\n\n                    $el.animate({ opacity: 1 }, 400, function() {\n                        _this.done();\n                        window.flinked.reinit()\n                    });\n                }\n          });\n\n          return FadeTransition\n    }\n\n    BasicTransition() {\n        var BasicTransition = Barba.BaseTransition.extend({\n            start: function() {\n              Promise\n                .all([this.newContainerLoading, this.fadeOut()])\n                .then(this.fadeIn.bind(this));\n            },\n\n            fadeOut: function() {\n              let deferred = Barba.Utils.deferred()\n\n              let header = {\n                menu: document.querySelector('.header'),\n              }\n\n              header.menu.classList.add('hideAnimation')\n\n              this.oldContainer.classList.add('hideContainer')\n\n              setTimeout(() => {\n                window.scroll(0,0)\n              }, 250 + 800);\n\n              setTimeout(() => {\n                deferred.resolve();\n              }, 250 + 1000);\n\n              return deferred.promise;\n            },\n\n            fadeIn: function() {\n\n              var _this = this;\n              var $el = jQuery(this.newContainer);\n\n              let page = {\n                page: this.newContainer.querySelector('main'),\n              }\n\n              let header = {\n                menu: document.querySelector('.header'),\n              }\n\n              setTimeout(() => {\n                page.page.classList.add('activePage')\n              }, 500);\n\n              setTimeout(() => {\n                header.menu.classList.remove('hideAnimation')\n              }, 800);\n\n              setTimeout(() => {\n                _this.done();\n                window.flinked.reinit()\n              }, 700);\n\n\n              jQuery(this.oldContainer).hide();\n\n              $el.css({\n                visibility : 'visible',\n              });\n            }\n          });\n\n          return BasicTransition\n    }\n\n    init() {\n\n    }\n}\n\nexport default BarbaTransition\n","import Barba from 'barba.js'\nimport BarbaConfig from './BarbaConfig'\nimport BarbaTransition from './BarbaTransition'\n\nclass PageTransition\n{\n    /**\n     * Constructor\n     */\n    constructor( options )\n    {\n        this.helper = null\n        this.transition = null\n        this.transitionObj = {}\n        this.lastClickEl = null\n\n    }\n\n    BarbaConfig() {\n        Barba.Pjax.start();\n        Barba.Prefetch.init();\n\n        // import help\n        this.helper = new BarbaConfig;\n        this.helper.settings();\n\n        this.transition = new BarbaTransition;\n\n        Barba.Dispatcher.on('linkClicked', (el) => {\n            this.lastClickEl = el;\n        });\n\n        Barba.Pjax.getTransition = () => {\n            let newPageName = Barba.Utils.getCurrentUrl().substr(Barba.Utils.getCurrentUrl().lastIndexOf(\"/\") + 1)\n            if(window.innerWidth > 750) {\n                if(this.lastClickEl) {\n                    if(this.lastClickEl.getAttribute('class') === null || this.lastClickEl.getAttribute('class') === \"basicTransition\" || this.lastClickEl.classList.contains(\"basicTransition\") || this.lastClickEl.getAttribute('class') === \"header__logo\") {\n                        return this.transition.BasicTransition()\n                    } else {\n                        return this.transition.fadeTransition()\n                    }\n                } else {\n                    return this.transition.fadeTransition()\n                }\n            } else {\n                return this.transition.fadeTransition()\n            }\n        };\n    }\n\n\n    init() {\n        this.BarbaConfig()\n    }\n}\n\nexport default PageTransition\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Barba\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Barba\"] = factory();\n\telse\n\t\troot[\"Barba\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"http://localhost:8080/dist\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t//Promise polyfill https://github.com/taylorhakes/promise-polyfill\n\t\n\tif (typeof Promise !== 'function') {\n\t window.Promise = __webpack_require__(1);\n\t}\n\t\n\tvar Barba = {\n\t  version: '1.0.0',\n\t  BaseTransition: __webpack_require__(4),\n\t  BaseView: __webpack_require__(6),\n\t  BaseCache: __webpack_require__(8),\n\t  Dispatcher: __webpack_require__(7),\n\t  HistoryManager: __webpack_require__(9),\n\t  Pjax: __webpack_require__(10),\n\t  Prefetch: __webpack_require__(13),\n\t  Utils: __webpack_require__(5)\n\t};\n\t\n\tmodule.exports = Barba;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate) {(function (root) {\n\t\n\t  // Store setTimeout reference so promise-polyfill will be unaffected by\n\t  // other code modifying setTimeout (like sinon.useFakeTimers())\n\t  var setTimeoutFunc = setTimeout;\n\t\n\t  function noop() {\n\t  }\n\t\n\t  // Use polyfill for setImmediate for performance gains\n\t  var asap = (typeof setImmediate === 'function' && setImmediate) ||\n\t    function (fn) {\n\t      setTimeoutFunc(fn, 0);\n\t    };\n\t\n\t  var onUnhandledRejection = function onUnhandledRejection(err) {\n\t    if (typeof console !== 'undefined' && console) {\n\t      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n\t    }\n\t  };\n\t\n\t  // Polyfill for Function.prototype.bind\n\t  function bind(fn, thisArg) {\n\t    return function () {\n\t      fn.apply(thisArg, arguments);\n\t    };\n\t  }\n\t\n\t  function Promise(fn) {\n\t    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\n\t    if (typeof fn !== 'function') throw new TypeError('not a function');\n\t    this._state = 0;\n\t    this._handled = false;\n\t    this._value = undefined;\n\t    this._deferreds = [];\n\t\n\t    doResolve(fn, this);\n\t  }\n\t\n\t  function handle(self, deferred) {\n\t    while (self._state === 3) {\n\t      self = self._value;\n\t    }\n\t    if (self._state === 0) {\n\t      self._deferreds.push(deferred);\n\t      return;\n\t    }\n\t    self._handled = true;\n\t    asap(function () {\n\t      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n\t      if (cb === null) {\n\t        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n\t        return;\n\t      }\n\t      var ret;\n\t      try {\n\t        ret = cb(self._value);\n\t      } catch (e) {\n\t        reject(deferred.promise, e);\n\t        return;\n\t      }\n\t      resolve(deferred.promise, ret);\n\t    });\n\t  }\n\t\n\t  function resolve(self, newValue) {\n\t    try {\n\t      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n\t      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n\t      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n\t        var then = newValue.then;\n\t        if (newValue instanceof Promise) {\n\t          self._state = 3;\n\t          self._value = newValue;\n\t          finale(self);\n\t          return;\n\t        } else if (typeof then === 'function') {\n\t          doResolve(bind(then, newValue), self);\n\t          return;\n\t        }\n\t      }\n\t      self._state = 1;\n\t      self._value = newValue;\n\t      finale(self);\n\t    } catch (e) {\n\t      reject(self, e);\n\t    }\n\t  }\n\t\n\t  function reject(self, newValue) {\n\t    self._state = 2;\n\t    self._value = newValue;\n\t    finale(self);\n\t  }\n\t\n\t  function finale(self) {\n\t    if (self._state === 2 && self._deferreds.length === 0) {\n\t      asap(function() {\n\t        if (!self._handled) {\n\t          onUnhandledRejection(self._value);\n\t        }\n\t      });\n\t    }\n\t\n\t    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n\t      handle(self, self._deferreds[i]);\n\t    }\n\t    self._deferreds = null;\n\t  }\n\t\n\t  function Handler(onFulfilled, onRejected, promise) {\n\t    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n\t    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n\t    this.promise = promise;\n\t  }\n\t\n\t  /**\n\t   * Take a potentially misbehaving resolver function and make sure\n\t   * onFulfilled and onRejected are only called once.\n\t   *\n\t   * Makes no guarantees about asynchrony.\n\t   */\n\t  function doResolve(fn, self) {\n\t    var done = false;\n\t    try {\n\t      fn(function (value) {\n\t        if (done) return;\n\t        done = true;\n\t        resolve(self, value);\n\t      }, function (reason) {\n\t        if (done) return;\n\t        done = true;\n\t        reject(self, reason);\n\t      });\n\t    } catch (ex) {\n\t      if (done) return;\n\t      done = true;\n\t      reject(self, ex);\n\t    }\n\t  }\n\t\n\t  Promise.prototype['catch'] = function (onRejected) {\n\t    return this.then(null, onRejected);\n\t  };\n\t\n\t  Promise.prototype.then = function (onFulfilled, onRejected) {\n\t    var prom = new (this.constructor)(noop);\n\t\n\t    handle(this, new Handler(onFulfilled, onRejected, prom));\n\t    return prom;\n\t  };\n\t\n\t  Promise.all = function (arr) {\n\t    var args = Array.prototype.slice.call(arr);\n\t\n\t    return new Promise(function (resolve, reject) {\n\t      if (args.length === 0) return resolve([]);\n\t      var remaining = args.length;\n\t\n\t      function res(i, val) {\n\t        try {\n\t          if (val && (typeof val === 'object' || typeof val === 'function')) {\n\t            var then = val.then;\n\t            if (typeof then === 'function') {\n\t              then.call(val, function (val) {\n\t                res(i, val);\n\t              }, reject);\n\t              return;\n\t            }\n\t          }\n\t          args[i] = val;\n\t          if (--remaining === 0) {\n\t            resolve(args);\n\t          }\n\t        } catch (ex) {\n\t          reject(ex);\n\t        }\n\t      }\n\t\n\t      for (var i = 0; i < args.length; i++) {\n\t        res(i, args[i]);\n\t      }\n\t    });\n\t  };\n\t\n\t  Promise.resolve = function (value) {\n\t    if (value && typeof value === 'object' && value.constructor === Promise) {\n\t      return value;\n\t    }\n\t\n\t    return new Promise(function (resolve) {\n\t      resolve(value);\n\t    });\n\t  };\n\t\n\t  Promise.reject = function (value) {\n\t    return new Promise(function (resolve, reject) {\n\t      reject(value);\n\t    });\n\t  };\n\t\n\t  Promise.race = function (values) {\n\t    return new Promise(function (resolve, reject) {\n\t      for (var i = 0, len = values.length; i < len; i++) {\n\t        values[i].then(resolve, reject);\n\t      }\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Set the immediate function to execute callbacks\n\t   * @param fn {function} Function to execute\n\t   * @private\n\t   */\n\t  Promise._setImmediateFn = function _setImmediateFn(fn) {\n\t    asap = fn;\n\t  };\n\t\n\t  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n\t    onUnhandledRejection = fn;\n\t  };\n\t\n\t  if (typeof module !== 'undefined' && module.exports) {\n\t    module.exports = Promise;\n\t  } else if (!root.Promise) {\n\t    root.Promise = Promise;\n\t  }\n\t\n\t})(this);\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).setImmediate))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(3).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\t\n\t// DOM APIs, for completeness\n\t\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\t\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\t\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\t\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\t\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\t\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\t\n\t  immediateIds[id] = true;\n\t\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\t\n\t  return id;\n\t};\n\t\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).setImmediate, __webpack_require__(2).clearImmediate))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\t(function () {\n\t  try {\n\t    cachedSetTimeout = setTimeout;\n\t  } catch (e) {\n\t    cachedSetTimeout = function () {\n\t      throw new Error('setTimeout is not defined');\n\t    }\n\t  }\n\t  try {\n\t    cachedClearTimeout = clearTimeout;\n\t  } catch (e) {\n\t    cachedClearTimeout = function () {\n\t      throw new Error('clearTimeout is not defined');\n\t    }\n\t  }\n\t} ())\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = cachedSetTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    cachedClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        cachedSetTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Utils = __webpack_require__(5);\n\t\n\t/**\n\t * BaseTransition to extend\n\t *\n\t * @namespace Barba.BaseTransition\n\t * @type {Object}\n\t */\n\tvar BaseTransition = {\n\t  /**\n\t   * @memberOf Barba.BaseTransition\n\t   * @type {HTMLElement}\n\t   */\n\t  oldContainer: undefined,\n\t\n\t  /**\n\t   * @memberOf Barba.BaseTransition\n\t   * @type {HTMLElement}\n\t   */\n\t  newContainer: undefined,\n\t\n\t  /**\n\t   * @memberOf Barba.BaseTransition\n\t   * @type {Promise}\n\t   */\n\t  newContainerLoading: undefined,\n\t\n\t  /**\n\t   * Helper to extend the object\n\t   *\n\t   * @memberOf Barba.BaseTransition\n\t   * @param  {Object} newObject\n\t   * @return {Object} newInheritObject\n\t   */\n\t  extend: function(obj){\n\t    return Utils.extend(this, obj);\n\t  },\n\t\n\t  /**\n\t   * This function is called from Pjax module to initialize\n\t   * the transition.\n\t   *\n\t   * @memberOf Barba.BaseTransition\n\t   * @private\n\t   * @param  {HTMLElement} oldContainer\n\t   * @param  {Promise} newContainer\n\t   * @return {Promise}\n\t   */\n\t  init: function(oldContainer, newContainer) {\n\t    var _this = this;\n\t\n\t    this.oldContainer = oldContainer;\n\t    this._newContainerPromise = newContainer;\n\t\n\t    this.deferred = Utils.deferred();\n\t    this.newContainerReady = Utils.deferred();\n\t    this.newContainerLoading = this.newContainerReady.promise;\n\t\n\t    this.start();\n\t\n\t    this._newContainerPromise.then(function(newContainer) {\n\t      _this.newContainer = newContainer;\n\t      _this.newContainerReady.resolve();\n\t    });\n\t\n\t    return this.deferred.promise;\n\t  },\n\t\n\t  /**\n\t   * This function needs to be called as soon the Transition is finished\n\t   *\n\t   * @memberOf Barba.BaseTransition\n\t   */\n\t  done: function() {\n\t    this.oldContainer.parentNode.removeChild(this.oldContainer);\n\t    this.newContainer.style.visibility = 'visible';\n\t    this.deferred.resolve();\n\t  },\n\t\n\t  /**\n\t   * Constructor for your Transition\n\t   *\n\t   * @memberOf Barba.BaseTransition\n\t   * @abstract\n\t   */\n\t  start: function() {},\n\t};\n\t\n\tmodule.exports = BaseTransition;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Just an object with some helpful functions\n\t *\n\t * @type {Object}\n\t * @namespace Barba.Utils\n\t */\n\tvar Utils = {\n\t  /**\n\t   * Return the current url\n\t   *\n\t   * @memberOf Barba.Utils\n\t   * @return {String} currentUrl\n\t   */\n\t  getCurrentUrl: function() {\n\t    return window.location.protocol + '//' +\n\t           window.location.host +\n\t           window.location.pathname +\n\t           window.location.search;\n\t  },\n\t\n\t  /**\n\t   * Given an url, return it without the hash\n\t   *\n\t   * @memberOf Barba.Utils\n\t   * @private\n\t   * @param  {String} url\n\t   * @return {String} newCleanUrl\n\t   */\n\t  cleanLink: function(url) {\n\t    return url.replace(/#.*/, '');\n\t  },\n\t\n\t  /**\n\t   * Time in millisecond after the xhr request goes in timeout\n\t   *\n\t   * @memberOf Barba.Utils\n\t   * @type {Number}\n\t   * @default\n\t   */\n\t  xhrTimeout: 5000,\n\t\n\t  /**\n\t   * Start an XMLHttpRequest() and return a Promise\n\t   *\n\t   * @memberOf Barba.Utils\n\t   * @param  {String} url\n\t   * @return {Promise}\n\t   */\n\t  xhr: function(url) {\n\t    var deferred = this.deferred();\n\t    var req = new XMLHttpRequest();\n\t\n\t    req.onreadystatechange = function() {\n\t      if (req.readyState === 4) {\n\t        if (req.status === 200) {\n\t          return deferred.resolve(req.responseText);\n\t        } else {\n\t          return deferred.reject(new Error('xhr: HTTP code is not 200'));\n\t        }\n\t      }\n\t    };\n\t\n\t    req.ontimeout = function() {\n\t      return deferred.reject(new Error('xhr: Timeout exceeded'));\n\t    };\n\t\n\t    req.open('GET', url);\n\t    req.timeout = this.xhrTimeout;\n\t    req.setRequestHeader('x-barba', 'yes');\n\t    req.send();\n\t\n\t    return deferred.promise;\n\t  },\n\t\n\t  /**\n\t   * Get obj and props and return a new object with the property merged\n\t   *\n\t   * @memberOf Barba.Utils\n\t   * @param  {object} obj\n\t   * @param  {object} props\n\t   * @return {object}\n\t   */\n\t  extend: function(obj, props) {\n\t    var newObj = Object.create(obj);\n\t\n\t    for(var prop in props) {\n\t      if(props.hasOwnProperty(prop)) {\n\t        newObj[prop] = props[prop];\n\t      }\n\t    }\n\t\n\t    return newObj;\n\t  },\n\t\n\t  /**\n\t   * Return a new \"Deferred\" object\n\t   * https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Deferred\n\t   *\n\t   * @memberOf Barba.Utils\n\t   * @return {Deferred}\n\t   */\n\t  deferred: function() {\n\t    return new function() {\n\t      this.resolve = null;\n\t      this.reject = null;\n\t\n\t      this.promise = new Promise(function(resolve, reject) {\n\t        this.resolve = resolve;\n\t        this.reject = reject;\n\t      }.bind(this));\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Return the port number normalized, eventually you can pass a string to be normalized.\n\t   *\n\t   * @memberOf Barba.Utils\n\t   * @private\n\t   * @param  {String} p\n\t   * @return {Int} port\n\t   */\n\t  getPort: function(p) {\n\t    var port = typeof p !== 'undefined' ? p : window.location.port;\n\t    var protocol = window.location.protocol;\n\t\n\t    if (port != '')\n\t      return parseInt(port);\n\t\n\t    if (protocol === 'http:')\n\t      return 80;\n\t\n\t    if (protocol === 'https:')\n\t      return 443;\n\t  }\n\t};\n\t\n\tmodule.exports = Utils;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Dispatcher = __webpack_require__(7);\n\tvar Utils = __webpack_require__(5);\n\t\n\t/**\n\t * BaseView to be extended\n\t *\n\t * @namespace Barba.BaseView\n\t * @type {Object}\n\t */\n\tvar BaseView  = {\n\t  /**\n\t   * Namespace of the view.\n\t   * (need to be associated with the data-namespace of the container)\n\t   *\n\t   * @memberOf Barba.BaseView\n\t   * @type {String}\n\t   */\n\t  namespace: null,\n\t\n\t  /**\n\t   * Helper to extend the object\n\t   *\n\t   * @memberOf Barba.BaseView\n\t   * @param  {Object} newObject\n\t   * @return {Object} newInheritObject\n\t   */\n\t  extend: function(obj){\n\t    return Utils.extend(this, obj);\n\t  },\n\t\n\t  /**\n\t   * Init the view.\n\t   * P.S. Is suggested to init the view before starting Barba.Pjax.start(),\n\t   * in this way .onEnter() and .onEnterCompleted() will be fired for the current\n\t   * container when the page is loaded.\n\t   *\n\t   * @memberOf Barba.BaseView\n\t   */\n\t  init: function() {\n\t    var _this = this;\n\t\n\t    Dispatcher.on('initStateChange',\n\t      function(newStatus, oldStatus) {\n\t        if (oldStatus && oldStatus.namespace === _this.namespace)\n\t          _this.onLeave();\n\t      }\n\t    );\n\t\n\t    Dispatcher.on('newPageReady',\n\t      function(newStatus, oldStatus, container) {\n\t        _this.container = container;\n\t\n\t        if (newStatus.namespace === _this.namespace)\n\t          _this.onEnter();\n\t      }\n\t    );\n\t\n\t    Dispatcher.on('transitionCompleted',\n\t      function(newStatus, oldStatus) {\n\t        if (newStatus.namespace === _this.namespace)\n\t          _this.onEnterCompleted();\n\t\n\t        if (oldStatus && oldStatus.namespace === _this.namespace)\n\t          _this.onLeaveCompleted();\n\t      }\n\t    );\n\t  },\n\t\n\t /**\n\t  * This function will be fired when the container\n\t  * is ready and attached to the DOM.\n\t  *\n\t  * @memberOf Barba.BaseView\n\t  * @abstract\n\t  */\n\t  onEnter: function() {},\n\t\n\t  /**\n\t   * This function will be fired when the transition\n\t   * to this container has just finished.\n\t   *\n\t   * @memberOf Barba.BaseView\n\t   * @abstract\n\t   */\n\t  onEnterCompleted: function() {},\n\t\n\t  /**\n\t   * This function will be fired when the transition\n\t   * to a new container has just started.\n\t   *\n\t   * @memberOf Barba.BaseView\n\t   * @abstract\n\t   */\n\t  onLeave: function() {},\n\t\n\t  /**\n\t   * This function will be fired when the container\n\t   * has just been removed from the DOM.\n\t   *\n\t   * @memberOf Barba.BaseView\n\t   * @abstract\n\t   */\n\t  onLeaveCompleted: function() {}\n\t}\n\t\n\tmodule.exports = BaseView;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Little Dispatcher inspired by MicroEvent.js\n\t *\n\t * @namespace Barba.Dispatcher\n\t * @type {Object}\n\t */\n\tvar Dispatcher = {\n\t  /**\n\t   * Object that keeps all the events\n\t   *\n\t   * @memberOf Barba.Dispatcher\n\t   * @readOnly\n\t   * @type {Object}\n\t   */\n\t  events: {},\n\t\n\t  /**\n\t   * Bind a callback to an event\n\t   *\n\t   * @memberOf Barba.Dispatcher\n\t   * @param  {String} eventName\n\t   * @param  {Function} function\n\t   */\n\t  on: function(e, f) {\n\t    this.events[e] = this.events[e] || [];\n\t    this.events[e].push(f);\n\t  },\n\t\n\t  /**\n\t   * Unbind event\n\t   *\n\t   * @memberOf Barba.Dispatcher\n\t   * @param  {String} eventName\n\t   * @param  {Function} function\n\t   */\n\t  off: function(e, f) {\n\t    if(e in this.events === false)\n\t      return;\n\t\n\t    this.events[e].splice(this.events[e].indexOf(f), 1);\n\t  },\n\t\n\t  /**\n\t   * Fire the event running all the event associated to it\n\t   *\n\t   * @memberOf Barba.Dispatcher\n\t   * @param  {String} eventName\n\t   * @param  {...*} args\n\t   */\n\t  trigger: function(e) {//e, ...args\n\t    if (e in this.events === false)\n\t      return;\n\t\n\t    for(var i = 0; i < this.events[e].length; i++){\n\t      this.events[e][i].apply(this, Array.prototype.slice.call(arguments, 1));\n\t    }\n\t  }\n\t};\n\t\n\tmodule.exports = Dispatcher;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Utils = __webpack_require__(5);\n\t\n\t/**\n\t * BaseCache it's a simple static cache\n\t *\n\t * @namespace Barba.BaseCache\n\t * @type {Object}\n\t */\n\tvar BaseCache = {\n\t  /**\n\t   * The Object that keeps all the key value information\n\t   *\n\t   * @memberOf Barba.BaseCache\n\t   * @type {Object}\n\t   */\n\t  data: {},\n\t\n\t  /**\n\t   * Helper to extend this object\n\t   *\n\t   * @memberOf Barba.BaseCache\n\t   * @private\n\t   * @param  {Object} newObject\n\t   * @return {Object} newInheritObject\n\t   */\n\t  extend: function(obj) {\n\t    return Utils.extend(this, obj);\n\t  },\n\t\n\t  /**\n\t   * Set a key and value data, mainly Barba is going to save promises\n\t   *\n\t   * @memberOf Barba.BaseCache\n\t   * @param {String} key\n\t   * @param {*} value\n\t   */\n\t  set: function(key, val) {\n\t    this.data[key] = val;\n\t  },\n\t\n\t  /**\n\t   * Retrieve the data using the key\n\t   *\n\t   * @memberOf Barba.BaseCache\n\t   * @param  {String} key\n\t   * @return {*}\n\t   */\n\t  get: function(key) {\n\t    return this.data[key];\n\t  },\n\t\n\t  /**\n\t   * Flush the cache\n\t   *\n\t   * @memberOf Barba.BaseCache\n\t   */\n\t  reset: function() {\n\t    this.data = {};\n\t  }\n\t};\n\t\n\tmodule.exports = BaseCache;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t/**\n\t * HistoryManager helps to keep track of the navigation\n\t *\n\t * @namespace Barba.HistoryManager\n\t * @type {Object}\n\t */\n\tvar HistoryManager = {\n\t  /**\n\t   * Keep track of the status in historic order\n\t   *\n\t   * @memberOf Barba.HistoryManager\n\t   * @readOnly\n\t   * @type {Array}\n\t   */\n\t  history: [],\n\t\n\t  /**\n\t   * Add a new set of url and namespace\n\t   *\n\t   * @memberOf Barba.HistoryManager\n\t   * @param {String} url\n\t   * @param {String} namespace\n\t   * @private\n\t   */\n\t  add: function(url, namespace) {\n\t    if (!namespace)\n\t      namespace = undefined;\n\t\n\t    this.history.push({\n\t      url: url,\n\t      namespace: namespace\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Return information about the current status\n\t   *\n\t   * @memberOf Barba.HistoryManager\n\t   * @return {Object}\n\t   */\n\t  currentStatus: function() {\n\t    return this.history[this.history.length - 1];\n\t  },\n\t\n\t  /**\n\t   * Return information about the previous status\n\t   *\n\t   * @memberOf Barba.HistoryManager\n\t   * @return {Object}\n\t   */\n\t  prevStatus: function() {\n\t    var history = this.history;\n\t\n\t    if (history.length < 2)\n\t      return null;\n\t\n\t    return history[history.length - 2];\n\t  }\n\t};\n\t\n\tmodule.exports = HistoryManager;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Utils = __webpack_require__(5);\n\tvar Dispatcher = __webpack_require__(7);\n\tvar HideShowTransition = __webpack_require__(11);\n\tvar BaseCache = __webpack_require__(8);\n\t\n\tvar HistoryManager = __webpack_require__(9);\n\tvar Dom = __webpack_require__(12);\n\t\n\t/**\n\t * Pjax is a static object with main function\n\t *\n\t * @namespace Barba.Pjax\n\t * @borrows Dom as Dom\n\t * @type {Object}\n\t */\n\tvar Pjax = {\n\t  Dom: Dom,\n\t  History: HistoryManager,\n\t  Cache: BaseCache,\n\t\n\t  /**\n\t   * Indicate wether or not use the cache\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @type {Boolean}\n\t   * @default\n\t   */\n\t  cacheEnabled: true,\n\t\n\t  /**\n\t   * Indicate if there is an animation in progress\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @readOnly\n\t   * @type {Boolean}\n\t   */\n\t  transitionProgress: false,\n\t\n\t  /**\n\t   * Class name used to ignore links\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @type {String}\n\t   * @default\n\t   */\n\t  ignoreClassLink: 'no-barba',\n\t\n\t  /**\n\t   * Function to be called to start Pjax\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   */\n\t  start: function() {\n\t    this.init();\n\t  },\n\t\n\t  /**\n\t   * Init the events\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @private\n\t   */\n\t  init: function() {\n\t    var container = this.Dom.getContainer();\n\t    var wrapper = this.Dom.getWrapper();\n\t\n\t    wrapper.setAttribute('aria-live', 'polite');\n\t\n\t    this.History.add(\n\t      this.getCurrentUrl(),\n\t      this.Dom.getNamespace(container)\n\t    );\n\t\n\t    //Fire for the current view.\n\t    Dispatcher.trigger('initStateChange', this.History.currentStatus());\n\t    Dispatcher.trigger('newPageReady',\n\t      this.History.currentStatus(),\n\t      {},\n\t      container,\n\t      this.Dom.currentHTML\n\t    );\n\t    Dispatcher.trigger('transitionCompleted', this.History.currentStatus());\n\t\n\t    this.bindEvents();\n\t  },\n\t\n\t  /**\n\t   * Attach the eventlisteners\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @private\n\t   */\n\t  bindEvents: function() {\n\t    document.addEventListener('click',\n\t      this.onLinkClick.bind(this)\n\t    );\n\t\n\t    window.addEventListener('popstate',\n\t      this.onStateChange.bind(this)\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Return the currentURL cleaned\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @return {String} currentUrl\n\t   */\n\t  getCurrentUrl: function() {\n\t    return Utils.cleanLink(\n\t      Utils.getCurrentUrl()\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Change the URL with pushstate and trigger the state change\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @param {String} newUrl\n\t   */\n\t  goTo: function(url) {\n\t    window.history.pushState(null, null, url);\n\t    this.onStateChange();\n\t  },\n\t\n\t  /**\n\t   * Force the browser to go to a certain url\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @param {String} url\n\t   * @private\n\t   */\n\t  forceGoTo: function(url) {\n\t    window.location = url;\n\t  },\n\t\n\t  /**\n\t   * Load an url, will start an xhr request or load from the cache\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @private\n\t   * @param  {String} url\n\t   * @return {Promise}\n\t   */\n\t  load: function(url) {\n\t    var deferred = Utils.deferred();\n\t    var _this = this;\n\t    var xhr;\n\t\n\t    xhr = this.Cache.get(url);\n\t\n\t    if (!xhr) {\n\t      xhr = Utils.xhr(url);\n\t      this.Cache.set(url, xhr);\n\t    }\n\t\n\t    xhr.then(\n\t      function(data) {\n\t        var container = _this.Dom.parseResponse(data);\n\t\n\t        _this.Dom.putContainer(container);\n\t\n\t        if (!_this.cacheEnabled)\n\t          _this.Cache.reset();\n\t\n\t        deferred.resolve(container);\n\t      },\n\t      function() {\n\t        //Something went wrong (timeout, 404, 505...)\n\t        _this.forceGoTo(url);\n\t\n\t        deferred.reject();\n\t      }\n\t    );\n\t\n\t    return deferred.promise;\n\t  },\n\t\n\t  /**\n\t   * Get the .href parameter out of an element\n\t   * and handle special cases (like xlink:href)\n\t   *\n\t   * @private\n\t   * @memberOf Barba.Pjax\n\t   * @param  {HTMLElement} el\n\t   * @return {String} href\n\t   */\n\t  getHref: function(el) {\n\t    if (!el) {\n\t      return undefined;\n\t    }\n\t\n\t    if (el.getAttribute && typeof el.getAttribute('xlink:href') === 'string') {\n\t      return el.getAttribute('xlink:href');\n\t    }\n\t\n\t    if (typeof el.href === 'string') {\n\t      return el.href;\n\t    }\n\t\n\t    return undefined;\n\t  },\n\t\n\t  /**\n\t   * Callback called from click event\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @private\n\t   * @param {MouseEvent} evt\n\t   */\n\t  onLinkClick: function(evt) {\n\t    var el = evt.target;\n\t\n\t    //Go up in the nodelist until we\n\t    //find something with an href\n\t    while (el && !this.getHref(el)) {\n\t      el = el.parentNode;\n\t    }\n\t\n\t    if (this.preventCheck(evt, el)) {\n\t      evt.stopPropagation();\n\t      evt.preventDefault();\n\t\n\t      Dispatcher.trigger('linkClicked', el, evt);\n\t\n\t      var href = this.getHref(el);\n\t      this.goTo(href);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Determine if the link should be followed\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @param  {MouseEvent} evt\n\t   * @param  {HTMLElement} element\n\t   * @return {Boolean}\n\t   */\n\t  preventCheck: function(evt, element) {\n\t    if (!window.history.pushState)\n\t      return false;\n\t\n\t    var href = this.getHref(element);\n\t\n\t    //User\n\t    if (!element || !href)\n\t      return false;\n\t\n\t    //Middle click, cmd click, and ctrl click\n\t    if (evt.which > 1 || evt.metaKey || evt.ctrlKey || evt.shiftKey || evt.altKey)\n\t      return false;\n\t\n\t    //Ignore target with _blank target\n\t    if (element.target && element.target === '_blank')\n\t      return false;\n\t\n\t    //Check if it's the same domain\n\t    if (window.location.protocol !== element.protocol || window.location.hostname !== element.hostname)\n\t      return false;\n\t\n\t    //Check if the port is the same\n\t    if (Utils.getPort() !== Utils.getPort(element.port))\n\t      return false;\n\t\n\t    //Ignore case when a hash is being tacked on the current URL\n\t    if (href.indexOf('#') > -1)\n\t      return false;\n\t\n\t    //Ignore case where there is download attribute\n\t    if (element.getAttribute && typeof element.getAttribute('download') === 'string')\n\t      return false;\n\t\n\t    //In case you're trying to load the same page\n\t    if (Utils.cleanLink(href) == Utils.cleanLink(location.href))\n\t      return false;\n\t\n\t    if (element.classList.contains(this.ignoreClassLink))\n\t      return false;\n\t\n\t    return true;\n\t  },\n\t\n\t  /**\n\t   * Return a transition object\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @return {Barba.Transition} Transition object\n\t   */\n\t  getTransition: function() {\n\t    //User customizable\n\t    return HideShowTransition;\n\t  },\n\t\n\t  /**\n\t   * Method called after a 'popstate' or from .goTo()\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @private\n\t   */\n\t  onStateChange: function() {\n\t    var newUrl = this.getCurrentUrl();\n\t\n\t    if (this.transitionProgress)\n\t      this.forceGoTo(newUrl);\n\t\n\t    if (this.History.currentStatus().url === newUrl)\n\t      return false;\n\t\n\t    this.History.add(newUrl);\n\t\n\t    var newContainer = this.load(newUrl);\n\t    var transition = Object.create(this.getTransition());\n\t\n\t    this.transitionProgress = true;\n\t\n\t    Dispatcher.trigger('initStateChange',\n\t      this.History.currentStatus(),\n\t      this.History.prevStatus()\n\t    );\n\t\n\t    var transitionInstance = transition.init(\n\t      this.Dom.getContainer(),\n\t      newContainer\n\t    );\n\t\n\t    newContainer.then(\n\t      this.onNewContainerLoaded.bind(this)\n\t    );\n\t\n\t    transitionInstance.then(\n\t      this.onTransitionEnd.bind(this)\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Function called as soon the new container is ready\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @private\n\t   * @param {HTMLElement} container\n\t   */\n\t  onNewContainerLoaded: function(container) {\n\t    var currentStatus = this.History.currentStatus();\n\t    currentStatus.namespace = this.Dom.getNamespace(container);\n\t\n\t    Dispatcher.trigger('newPageReady',\n\t      this.History.currentStatus(),\n\t      this.History.prevStatus(),\n\t      container,\n\t      this.Dom.currentHTML\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Function called as soon the transition is finished\n\t   *\n\t   * @memberOf Barba.Pjax\n\t   * @private\n\t   */\n\t  onTransitionEnd: function() {\n\t    this.transitionProgress = false;\n\t\n\t    Dispatcher.trigger('transitionCompleted',\n\t      this.History.currentStatus(),\n\t      this.History.prevStatus()\n\t    );\n\t  }\n\t};\n\t\n\tmodule.exports = Pjax;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BaseTransition = __webpack_require__(4);\n\t\n\t/**\n\t * Basic Transition object, wait for the new Container to be ready,\n\t * scroll top, and finish the transition (removing the old container and displaying the new one)\n\t *\n\t * @private\n\t * @namespace Barba.HideShowTransition\n\t * @augments Barba.BaseTransition\n\t */\n\tvar HideShowTransition = BaseTransition.extend({\n\t  start: function() {\n\t    this.newContainerLoading.then(this.finish.bind(this));\n\t  },\n\t\n\t  finish: function() {\n\t    document.body.scrollTop = 0;\n\t    this.done();\n\t  }\n\t});\n\t\n\tmodule.exports = HideShowTransition;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Object that is going to deal with DOM parsing/manipulation\n\t *\n\t * @namespace Barba.Pjax.Dom\n\t * @type {Object}\n\t */\n\tvar Dom = {\n\t  /**\n\t   * The name of the data attribute on the container\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @type {String}\n\t   * @default\n\t   */\n\t  dataNamespace: 'namespace',\n\t\n\t  /**\n\t   * Id of the main wrapper\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @type {String}\n\t   * @default\n\t   */\n\t  wrapperId: 'barba-wrapper',\n\t\n\t  /**\n\t   * Class name used to identify the containers\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @type {String}\n\t   * @default\n\t   */\n\t  containerClass: 'barba-container',\n\t\n\t  /**\n\t   * Full HTML String of the current page.\n\t   * By default is the innerHTML of the initial loaded page.\n\t   *\n\t   * Each time a new page is loaded, the value is the response of the xhr call.\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @type {String}\n\t   */\n\t  currentHTML: document.documentElement.innerHTML,\n\t\n\t  /**\n\t   * Parse the responseText obtained from the xhr call\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @private\n\t   * @param  {String} responseText\n\t   * @return {HTMLElement}\n\t   */\n\t  parseResponse: function(responseText) {\n\t    this.currentHTML = responseText;\n\t\n\t    var wrapper = document.createElement('div');\n\t    wrapper.innerHTML = responseText;\n\t\n\t    var titleEl = wrapper.querySelector('title');\n\t\n\t    if (titleEl)\n\t      document.title = titleEl.textContent;\n\t\n\t    return this.getContainer(wrapper);\n\t  },\n\t\n\t  /**\n\t   * Get the main barba wrapper by the ID `wrapperId`\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @return {HTMLElement} element\n\t   */\n\t  getWrapper: function() {\n\t    var wrapper = document.getElementById(this.wrapperId);\n\t\n\t    if (!wrapper)\n\t      throw new Error('Barba.js: wrapper not found!');\n\t\n\t    return wrapper;\n\t  },\n\t\n\t  /**\n\t   * Get the container on the current DOM,\n\t   * or from an HTMLElement passed via argument\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @private\n\t   * @param  {HTMLElement} element\n\t   * @return {HTMLElement}\n\t   */\n\t  getContainer: function(element) {\n\t    if (!element)\n\t      element = document.body;\n\t\n\t    if (!element)\n\t      throw new Error('Barba.js: DOM not ready!');\n\t\n\t    var container = this.parseContainer(element);\n\t\n\t    if (container && container.jquery)\n\t      container = container[0];\n\t\n\t    if (!container)\n\t      throw new Error('Barba.js: no container found');\n\t\n\t    return container;\n\t  },\n\t\n\t  /**\n\t   * Get the namespace of the container\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @private\n\t   * @param  {HTMLElement} element\n\t   * @return {String}\n\t   */\n\t  getNamespace: function(element) {\n\t    if (element && element.dataset) {\n\t      return element.dataset[this.dataNamespace];\n\t    } else if (element) {\n\t      return element.getAttribute('data-' + this.dataNamespace);\n\t    }\n\t\n\t    return null;\n\t  },\n\t\n\t  /**\n\t   * Put the container on the page\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @private\n\t   * @param  {HTMLElement} element\n\t   */\n\t  putContainer: function(element) {\n\t    element.style.visibility = 'hidden';\n\t\n\t    var wrapper = this.getWrapper();\n\t    wrapper.appendChild(element);\n\t  },\n\t\n\t  /**\n\t   * Get container selector\n\t   *\n\t   * @memberOf Barba.Pjax.Dom\n\t   * @private\n\t   * @param  {HTMLElement} element\n\t   * @return {HTMLElement} element\n\t   */\n\t  parseContainer: function(element) {\n\t    return element.querySelector('.' + this.containerClass);\n\t  }\n\t};\n\t\n\tmodule.exports = Dom;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Utils = __webpack_require__(5);\n\tvar Pjax = __webpack_require__(10);\n\t\n\t/**\n\t * Prefetch\n\t *\n\t * @namespace Barba.Prefetch\n\t * @type {Object}\n\t */\n\tvar Prefetch = {\n\t  /**\n\t   * Class name used to ignore prefetch on links\n\t   *\n\t   * @memberOf Barba.Prefetch\n\t   * @type {String}\n\t   * @default\n\t   */\n\t  ignoreClassLink: 'no-barba-prefetch',\n\t\n\t  /**\n\t   * Init the event listener on mouseover and touchstart\n\t   * for the prefetch\n\t   *\n\t   * @memberOf Barba.Prefetch\n\t   */\n\t  init: function() {\n\t    if (!window.history.pushState) {\n\t      return false;\n\t    }\n\t\n\t    document.body.addEventListener('mouseover', this.onLinkEnter.bind(this));\n\t    document.body.addEventListener('touchstart', this.onLinkEnter.bind(this));\n\t  },\n\t\n\t  /**\n\t   * Callback for the mousehover/touchstart\n\t   *\n\t   * @memberOf Barba.Prefetch\n\t   * @private\n\t   * @param  {Object} evt\n\t   */\n\t  onLinkEnter: function(evt) {\n\t    var el = evt.target;\n\t\n\t    while (el && !Pjax.getHref(el)) {\n\t      el = el.parentNode;\n\t    }\n\t\n\t    if (!el || el.classList.contains(this.ignoreClassLink)) {\n\t      return;\n\t    }\n\t\n\t    var url = Pjax.getHref(el);\n\t\n\t    //Check if the link is elegible for Pjax\n\t    if (Pjax.preventCheck(evt, el) && !Pjax.Cache.get(url)) {\n\t      var xhr = Utils.xhr(url);\n\t      Pjax.Cache.set(url, xhr);\n\t    }\n\t  }\n\t};\n\t\n\tmodule.exports = Prefetch;\n\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=barba.js.map"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}